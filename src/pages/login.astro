---
// Login page doesn't use standard admin layout since it's public facing
import "../styles/global.css";
import { API_CONFIG } from "../utils/config";
import BaseLayout from "../layouts/BaseLayout.astro";
import { loginAsAdmin } from "../utils/api";

// Server-side cookie check
const tokenCookie = Astro.cookies.get("adminToken")?.value;
if (
  tokenCookie && // Check the cookie existence
  Astro.request.headers.get("sec-fetch-dest") !== "script"
) {
  return Astro.redirect("/dashboard");
}

// Use the configured API URL from environment
const apiBaseUrl = API_CONFIG.expressApiUrl;
---

<BaseLayout title="Admin Login">
  <div class="login-container">
    <div class="login-card">
      <div class="login-header">
        <h2>Admin Login</h2>
        <p>Log in to access the dashboard</p>
      </div>

      <div id="loginAlert" class="alert d-none" role="alert"></div>

      <div class="login-body">
        <form id="loginForm">
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-user"></i></span>
              <input
                type="text"
                class="form-control"
                id="username"
                name="username"
                required
                autocomplete="username"
              />
            </div>
          </div>

          <div class="mb-4">
            <label for="password" class="form-label">Password</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-lock"></i></span>
              <input
                type="password"
                class="form-control"
                id="password"
                name="password"
                required
                autocomplete="current-password"
              />
            </div>
          </div>

          <div class="d-grid">
            <button
              type="submit"
              id="loginButton"
              class="btn btn-primary btn-lg"
            >
              <span
                class="spinner-border spinner-border-sm btn-spinner"
                role="status"
                aria-hidden="true"></span>
              <span class="btn-text"
                ><i class="fas fa-sign-in-alt me-2"></i> Log In</span
              >
            </button>
          </div>
        </form>
      </div>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    ></script>

    <script>
      // Pass server-side configuration to client
      window.CONFIG = {
        apiBaseUrl: `${import.meta.env.PUBLIC_API_URL || "http://localhost:8001"}`,
      };
      console.log("CONFIG initialized:", window.CONFIG);
    </script>

    <!-- Pure vanilla JavaScript login (no TypeScript) -->
    <script is:inline>
      document.addEventListener("DOMContentLoaded", function () {
        console.log("Login page loaded");

        // BUGFIX: Clear any existing redirect flags to prevent redirect loops
        sessionStorage.removeItem("redirecting_to_login");

        // Check for error parameter in URL - if present, clear token
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has("error")) {
          console.log("Error parameter detected, clearing any existing tokens");
          localStorage.removeItem("adminToken");
        }

        // Get form elements
        const loginForm = document.getElementById("loginForm");
        const loginButton = document.getElementById("loginButton");
        const spinner = document.querySelector(".btn-spinner");
        const btnText = document.querySelector(".btn-text");
        const usernameField = document.getElementById("username");
        const passwordField = document.getElementById("password");

        // Hide spinner initially
        if (spinner) spinner.style.display = "none";

        // Form submission
        if (loginForm) {
          loginForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const username = usernameField?.value || "";
            const password = passwordField?.value || "";

            console.log("Login attempt for username:", username);

            // Validate inputs
            if (!username || !password) {
              showLoginAlert(
                "Please enter both username and password",
                "danger"
              );
              return;
            }

            // Show loading state
            setLoading(true);

            // Special handling for admin login
            if (username.toLowerCase() === "admin") {
              console.log(
                "Detected admin login attempt, using special login helper"
              );

              try {
                // Import the admin login helper
                const { loginAsAdmin } = await import("/src/utils/api.js");

                // Try admin login first
                const adminLoginSuccess = await loginAsAdmin(
                  username,
                  handleLoginSuccess
                );

                if (adminLoginSuccess) {
                  // Already logged in via helper
                  return;
                }

                // If admin login helper failed, continue with regular login
                console.log("Admin helper login failed, trying regular login");
              } catch (adminError) {
                console.error("Admin login helper error:", adminError);
                // Continue with regular login
              }
            }

            // Special handling for our test user - normalize the input
            let normalizedUsername = username;
            if (
              username.toLowerCase() === "aasees" ||
              username.toLowerCase().includes("aasees")
            ) {
              console.log("Normalizing aasees username to full email");
              normalizedUsername = "aasees.sethi@impulstrip.com";
            }

            // Proceed with regular login
            const apiBaseUrl = window.CONFIG
              ? window.CONFIG.apiBaseUrl
              : "http://localhost:8001";
            console.log("Using API URL:", apiBaseUrl);

            // Use our enhanced login function for all users
            try {
              const { loginUser } = await import("/src/utils/api.js");
              console.log(
                `Attempting login with normalized username: ${normalizedUsername}`
              );
              const data = await loginUser(normalizedUsername, password);
              handleLoginSuccess(data);
            } catch (error) {
              console.error("Login error:", error);
              setLoading(false);

              // Special messaging for test users
              if (
                normalizedUsername.toLowerCase().includes("aasees") ||
                normalizedUsername.toLowerCase().includes("impulstrip")
              ) {
                showLoginAlert(
                  "For test users, try using 'password' as the password, or contact support.",
                  "warning"
                );
              } else {
                showLoginAlert(
                  error instanceof Error
                    ? error.message
                    : "Authentication failed",
                  "danger"
                );
              }
            }
          });
        }

        // Function to handle successful login
        function handleLoginSuccess(data) {
          // Check for token
          var token = data.access_token;
          if (!token) {
            throw new Error("No access token received in response");
          }

          console.log("Token received, storing and redirecting");

          // Store token
          localStorage.setItem("adminToken", token);

          // Store expiry
          var expiryTime = new Date();
          expiryTime.setHours(expiryTime.getHours() + 12); // 12 hour expiry in production
          localStorage.setItem("tokenExpiry", expiryTime.toISOString());

          // CRITICAL FIX: Also store in sessionStorage for immediate availability
          sessionStorage.setItem("adminTokenBackup", token);

          // Clear any redirect flags
          sessionStorage.removeItem("redirecting_to_login");

          // Set secure cookie for production
          document.cookie = `adminToken=${token}; path=/; max-age=43200; SameSite=Lax`;

          // Redirect to dashboard
          var redirectUrl = new URLSearchParams(window.location.search).get(
            "redirect"
          );
          window.location.href = redirectUrl || "/dashboard";
        }

        // Toggle loading state
        function setLoading(isLoading) {
          if (spinner && btnText && loginButton) {
            spinner.style.display = isLoading ? "inline-block" : "none";
            btnText.textContent = isLoading ? "Logging in..." : "Log In";
            loginButton.disabled = isLoading;
          }
        }

        // Show login alert
        function showLoginAlert(message, type) {
          const loginAlert = document.getElementById("loginAlert");
          if (loginAlert) {
            loginAlert.className = `alert alert-${type}`;
            loginAlert.textContent = message;
            loginAlert.classList.remove("d-none");
          }
        }
      });
    </script>
  </div>
</BaseLayout>

<style>
  .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: linear-gradient(135deg, #000000 0%, #121212 100%);
  }

  .login-card {
    width: 100%;
    max-width: 450px;
    background-color: rgba(25, 25, 25, 0.9);
    border-radius: 10px;
    border: 1px solid #333;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.5),
      0 10px 10px -5px rgba(0, 0, 0, 0.2);
    overflow: hidden;
  }

  .login-header {
    background-color: rgba(0, 0, 0, 0.4);
    padding: 1.5rem;
    border-bottom: 1px solid #333;
    text-align: center;
  }

  .login-header h2 {
    color: var(--primary);
    margin-bottom: 0.5rem;
  }

  .login-header p {
    color: #aaa;
    margin-bottom: 0;
  }

  .login-body {
    padding: 1.5rem;
  }

  .form-control {
    background-color: rgba(0, 0, 0, 0.3);
    border-color: #444;
    color: #fff;
  }

  .form-control:focus {
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25);
  }

  .input-group-text {
    background-color: rgba(0, 0, 0, 0.5);
    border-color: #444;
    color: #aaa;
  }

  .btn-spinner {
    margin-right: 0.5rem;
  }
</style>
