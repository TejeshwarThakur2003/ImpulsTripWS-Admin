---
// Login page doesn't use standard admin layout since it's public facing
import "../styles/global.css";
import { isAuthenticated } from "../utils/auth";
import { apiRequest } from "../utils/api";

// Redirect if already logged in
if (
  isAuthenticated() &&
  Astro.request.headers.get("sec-fetch-dest") !== "script"
) {
  return Astro.redirect("/dashboard");
}

// Define if we're in development mode
const isDev = import.meta.env.MODE === "development";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      http-equiv="X-Content-Security-Policy"
      content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com; font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com; img-src 'self' data:; connect-src 'self' https://api.impulstrip.com;"
    />
    <title>Login - ImpulsTrip Admin</title>
    <link rel="icon" type="image/png" href="/img/favicon.png" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font imports from branding -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Rampart+One&family=DM+Sans:opsz,wght@9..40,400;9..40,700&family=Bebas+Neue&display=swap"
      rel="stylesheet"
    />
    <!-- Font Awesome for icons -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      .login-container {
        max-width: 420px;
        margin: 80px auto;
        padding: 30px;
        background-color: #1a1a1a;
        border: 1px solid #333;
        border-radius: 8px;
      }

      .brand-header {
        text-align: center;
        margin-bottom: 30px;
      }

      .logo-img {
        height: 60px;
        margin-bottom: 15px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="login-container">
        <div class="brand-header">
          <img src="/img/favicon.png" alt="ImpulsTrip Logo" class="logo-img" />
          <h1>ImpulsTrip Admin</h1>
        </div>

        <div id="loginAlert" class="alert alert-danger d-none" role="alert">
        </div>

        <form id="loginForm">
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-user"></i></span>
              <input type="text" class="form-control" id="username" required />
            </div>
          </div>

          <div class="mb-4">
            <label for="password" class="form-label">Password</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-lock"></i></span>
              <input
                type="password"
                class="form-control"
                id="password"
                required
              />
            </div>
          </div>

          <div class="d-grid">
            <button type="submit" class="btn btn-primary btn-lg">
              <i class="fas fa-sign-in-alt me-2"></i> Log In
            </button>
          </div>
        </form>
      </div>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    ></script>
    <script>
      import { isAuthenticated, setToken } from "../utils/auth";
      import { apiRequest } from "../utils/api";

      document.addEventListener("DOMContentLoaded", function () {
        // Check if already logged in
        if (isAuthenticated()) {
          window.location.href = "/dashboard";
        }

        const loginForm = document.getElementById("loginForm");
        const loginAlert = document.getElementById("loginAlert");

        if (loginForm && loginAlert) {
          loginForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const usernameInput = document.getElementById(
              "username"
            ) as HTMLInputElement;
            const passwordInput = document.getElementById(
              "password"
            ) as HTMLInputElement;

            if (usernameInput && passwordInput) {
              const username = usernameInput.value;
              const password = passwordInput.value;

              // Show a loading message in the alert box
              loginAlert.textContent = "Trying to log in...";
              loginAlert.classList.remove("d-none");
              loginAlert.classList.remove("alert-danger");
              loginAlert.classList.add("alert-info");

              try {
                console.log("Making direct login request to /admin/auth/login");

                // Make a direct fetch request instead of using apiRequest
                // to avoid fallback behavior in case of errors
                const response = await fetch(
                  "http://localhost:8001/admin/auth/login",
                  {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ username, password }),
                  }
                );

                if (!response.ok) {
                  // Handle HTTP error responses
                  const errorData = await response.json();
                  throw new Error(
                    errorData.error ||
                      `Login failed with status: ${response.status}`
                  );
                }

                // Parse response data
                const data = await response.json();
                console.log("Login response received:", data);

                // Check for token in the response
                const token = data.access_token;

                if (!token) {
                  throw new Error("No access token received in response");
                }

                // Store authentication data
                setToken(token);

                // Add a slight delay before redirecting
                setTimeout(() => {
                  window.location.href = "/dashboard";
                }, 100);
              } catch (error) {
                if (loginAlert) {
                  loginAlert.classList.remove("alert-info");
                  loginAlert.classList.add("alert-danger");
                  loginAlert.textContent =
                    error instanceof Error
                      ? error.message
                      : "Invalid username or password";
                }
                console.error("Login error:", error);
              }
            }
          });
        }
      });
    </script>
  </body>
</html>
