---
import AdminLayout from "../layouts/AdminLayout.astro";
import { apiRequest, fetchContactMessages } from "../utils/api";

// Define interfaces
interface ContactMessage {
  id: string;
  name: string;
  email: string;
  message: string;
  created_at: string;
}

interface ContactData {
  messages: ContactMessage[];
  total: number;
  total_pages: number;
  page: number;
  limit: number;
}

// Default empty state
const defaultContactData: ContactData = {
  messages: [],
  total: 0,
  total_pages: 0,
  page: 1,
  limit: 10,
};

// Try to fetch initial contact data
let contactData: ContactData = defaultContactData;
try {
  // Use the specialized contact fetching function instead
  const response = await fetchContactMessages<ContactData>(1, 10);
  // Only update contactData if response has messages array and other required properties
  if (response && response.messages) {
    contactData = response;
  }
} catch (error) {
  console.error("Error fetching contact messages:", error);
}
---

<AdminLayout title="Contact Messages" currentPage="contact-messages">
  <div class="container">
    <div class="row mb-4">
      <div class="col-md-8">
        <h2>Contact Messages</h2>
        <p class="text-muted">
          Manage messages received through the contact form
        </p>
      </div>
      <div class="col-md-4 text-end">
        <button id="exportBtn" class="btn btn-outline-primary">
          <i class="fas fa-download me-2"></i>Export
        </button>
      </div>
    </div>

    <!-- Filter Controls -->
    <div class="contact-card mb-4">
      <div class="contact-card-header">
        <h5><i class="fas fa-filter me-2"></i>Filter Messages</h5>
      </div>
      <div class="contact-card-body">
        <div class="row">
          <div class="col-md-4 mb-3">
            <label for="emailFilter" class="form-label">Email</label>
            <input
              type="text"
              class="form-control"
              id="emailFilter"
              placeholder="Search by email"
            />
          </div>
          <div class="col-md-4 mb-3">
            <label for="nameFilter" class="form-label">Name</label>
            <input
              type="text"
              class="form-control"
              id="nameFilter"
              placeholder="Search by name"
            />
          </div>
          <div class="col-md-4 mb-3">
            <label for="dateFilter" class="form-label">Date</label>
            <input type="date" class="form-control" id="dateFilter" />
          </div>
        </div>
        <div class="row mt-2">
          <div class="col-12 text-end">
            <button id="clearFiltersBtn" class="btn btn-outline-secondary me-2">
              <i class="fas fa-eraser me-2"></i>Clear Filters
            </button>
            <button id="applyFiltersBtn" class="btn btn-primary">
              <i class="fas fa-search me-2"></i>Apply Filters
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Messages List -->
    <div class="contact-card">
      <div
        class="contact-card-header d-flex justify-content-between align-items-center"
      >
        <h5><i class="fas fa-envelope me-2"></i>Messages</h5>
        <div class="d-flex align-items-center">
          <div class="me-3">
            <select id="limitSelect" class="form-select form-select-sm">
              <option value="10">10 per page</option>
              <option value="25">25 per page</option>
              <option value="50">50 per page</option>
              <option value="100">100 per page</option>
            </select>
          </div>
          <div>
            <span
              >Total: <span id="totalMessages">{contactData.total}</span></span
            >
          </div>
        </div>
      </div>
      <div class="contact-card-body">
        <div class="table-responsive">
          <table class="table table-dark table-hover contact-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Message</th>
                <th>Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="contactTableBody">
              {
                contactData.messages.map((message) => (
                  <tr data-id={message.id}>
                    <td>{message.name}</td>
                    <td>
                      <a href={`mailto:${message.email}`}>{message.email}</a>
                    </td>
                    <td>
                      {message.message.length > 50
                        ? `${message.message.substring(0, 50)}...`
                        : message.message}
                    </td>
                    <td>{new Date(message.created_at).toLocaleDateString()}</td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        <button
                          class="btn btn-sm btn-outline-primary view-btn"
                          data-id={message.id}
                        >
                          <i class="fas fa-eye" />
                        </button>
                        <button
                          class="btn btn-sm btn-outline-danger delete-btn"
                          data-id={message.id}
                        >
                          <i class="fas fa-trash" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        <!-- Empty State -->
        {
          contactData.messages.length === 0 && (
            <div class="text-center py-5">
              <div class="display-6 text-muted mb-3">
                <i class="fas fa-inbox" />
              </div>
              <h4>No messages found</h4>
              <p class="text-muted">
                {contactData.total === 0
                  ? "You haven't received any contact messages yet."
                  : "No messages match your current filters."}
              </p>
            </div>
          )
        }

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-4">
          <div>
            <span class="text-muted" id="paginationInfo">
              Showing{" "}
              <span id="showingFrom">
                {
                  contactData.messages.length
                    ? (contactData.page - 1) * contactData.limit + 1
                    : 0
                }
              </span>{" "}
              to{" "}
              <span id="showingTo">
                {
                  Math.min(
                    contactData.page * contactData.limit,
                    contactData.total
                  )
                }
              </span>{" "}
              of <span id="showingTotal">{contactData.total}</span> messages
            </span>
          </div>

          <nav aria-label="Contact message pagination">
            <ul class="pagination" id="pagination">
              <li
                class={`page-item ${contactData.page <= 1 ? "disabled" : ""}`}
              >
                <a class="page-link" href="#" id="prevPage"> Previous </a>
              </li>
              <!-- Page numbers will be dynamically inserted here -->
              <li
                class={`page-item ${
                  contactData.page >= contactData.total_pages ? "disabled" : ""
                }`}
              >
                <a class="page-link" href="#" id="nextPage"> Next </a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>

  <!-- Message View Modal -->
  <div
    class="modal fade"
    id="viewMessageModal"
    tabindex="-1"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content bg-dark text-light">
        <div class="modal-header">
          <h5 class="modal-title">Contact Message</h5>
          <button
            type="button"
            class="btn-close btn-close-white"
            data-bs-dismiss="modal"
            aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label fw-bold">From:</label>
            <div id="modalName"></div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Email:</label>
            <div>
              <a href="#" id="modalEmail"></a>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Date:</label>
            <div id="modalDate"></div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Message:</label>
            <div class="p-3 bg-black rounded" id="modalMessage"></div>
          </div>
        </div>
        <div class="modal-footer">
          <button
            type="button"
            class="btn btn-outline-secondary"
            data-bs-dismiss="modal">Close</button
          >
          <a href="#" class="btn btn-primary" id="replyBtn">
            <i class="fas fa-reply me-2"></i>Reply
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Auth Check Script -->
  <script>
    // Extend Window interface to include loadContactData function
    declare global {
      interface Window {
        loadContactData?: () => void;
        skipAuthRedirect?: boolean;
        reinitializeMessages?: () => Promise<void>;
        confirmDeleteMessage?: (id: string, name: string) => void;
      }
    }

    // Just call loadContactData directly without token verification
    document.addEventListener("DOMContentLoaded", function () {
      // Force reload data
      if (typeof window.loadContactData === "function") {
        setTimeout(() => window.loadContactData!(), 500);
      }
    });
  </script>
</AdminLayout>

<style>
  /* Contact card styles */
  .contact-card {
    background-color: #1a1a1a;
    border: 1px solid #333;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .contact-card-header {
    background-color: rgba(0, 0, 0, 0.3);
    color: var(--primary);
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #333;
  }

  .contact-card-body {
    padding: 1.5rem;
  }

  /* Table styles */
  .contact-table {
    border-color: #333;
  }

  .contact-table th {
    border-bottom-color: #444;
    color: var(--gray-light);
  }

  .contact-table td {
    border-bottom-color: #333;
    vertical-align: middle;
  }

  /* Pagination styles */
  .pagination .page-link {
    background-color: #222;
    border-color: #333;
    color: var(--light);
  }

  .pagination .page-link:hover {
    background-color: #333;
    border-color: #444;
    color: var(--primary);
  }

  .pagination .page-item.active .page-link {
    background-color: var(--primary);
    border-color: var(--primary);
    color: #000;
  }

  .pagination .page-item.disabled .page-link {
    background-color: #222;
    border-color: #333;
    color: #666;
  }

  .contact-table .view-btn:hover {
    background-color: var(--primary);
    color: #fff;
    border-color: var(--primary);
  }

  .contact-table .view-btn:focus {
    box-shadow: 0 0 0 0.2rem rgba(var(--primary-rgb), 0.25);
  }

  .contact-table tbody tr {
    transition: background-color 0.2s;
  }

  .contact-table tbody tr:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .loading-spinner {
    display: inline-block;
    width: 2rem;
    height: 2rem;
    vertical-align: text-bottom;
    border: 0.25em solid currentColor;
    border-right-color: transparent;
    border-radius: 50%;
    animation: spinner-border 0.75s linear infinite;
    opacity: 0.5;
  }

  @keyframes spinner-border {
    to {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  import { apiRequest, fetchContactMessages } from "../utils/api";

  // Use type assertion for Bootstrap to fix TypeScript errors
  const bootstrap = window.bootstrap as any;

  // TypeScript interfaces
  interface ContactMessage {
    id: string;
    name: string;
    email: string;
    message: string;
    created_at: string;
  }

  interface ContactData {
    messages: ContactMessage[];
    total: number;
    total_pages: number;
    page: number;
    limit: number;
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Global state for filters and pagination
    let currentPage = 1;
    let itemsPerPage = 10;
    let currentFilters = {
      email: "",
      name: "",
      date: "",
    };

    // Track the current message for reply functionality
    let currentMessageData: ContactMessage | null = null;

    // Get UI elements
    const contactTableBody = document.getElementById("contactTableBody");
    const pagination = document.getElementById("pagination");
    const emailFilter = document.getElementById(
      "emailFilter"
    ) as HTMLInputElement;
    const nameFilter = document.getElementById(
      "nameFilter"
    ) as HTMLInputElement;
    const dateFilter = document.getElementById(
      "dateFilter"
    ) as HTMLInputElement;
    const clearFiltersBtn = document.getElementById("clearFiltersBtn");
    const applyFiltersBtn = document.getElementById("applyFiltersBtn");
    const limitSelect = document.getElementById(
      "limitSelect"
    ) as HTMLSelectElement;
    const exportBtn = document.getElementById("exportBtn");
    const prevPageBtn = document.getElementById("prevPage");
    const nextPageBtn = document.getElementById("nextPage");
    const replyBtn = document.getElementById("replyBtn");

    // Initialize event listeners
    if (limitSelect) {
      limitSelect.addEventListener("change", (e) => {
        itemsPerPage = parseInt(limitSelect.value);
        currentPage = 1; // Reset to first page when changing limit
        loadContactData();
      });
    }

    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener("click", clearFilters);
    }

    if (applyFiltersBtn) {
      applyFiltersBtn.addEventListener("click", applyFilters);
    }

    if (prevPageBtn) {
      prevPageBtn.addEventListener("click", (e) => {
        e.preventDefault();
        if (currentPage > 1) {
          currentPage--;
          loadContactData();
        }
      });
    }

    if (nextPageBtn) {
      nextPageBtn.addEventListener("click", (e) => {
        e.preventDefault();
        // Next page button will be enabled/disabled based on response data
        currentPage++;
        loadContactData();
      });
    }

    if (exportBtn) {
      exportBtn.addEventListener("click", exportContactData);
    }

    // Add event listener for reply button
    if (replyBtn) {
      replyBtn.addEventListener("click", (e) => {
        e.preventDefault();
        if (currentMessageData && currentMessageData.email) {
          window.location.href = `mailto:${currentMessageData.email}?subject=Re: Your message to ImpulsTrip`;
        } else {
          if (window.showToast) {
            window.showToast(
              "Cannot reply - email address unavailable",
              "error"
            );
          }
        }
      });
    }

    // Initial data load
    loadContactData();

    // Function to clear filters
    function clearFilters() {
      if (emailFilter) emailFilter.value = "";
      if (nameFilter) nameFilter.value = "";
      if (dateFilter) dateFilter.value = "";

      currentFilters = {
        email: "",
        name: "",
        date: "",
      };

      currentPage = 1; // Reset to first page
      loadContactData();
    }

    // Function to apply filters
    function applyFilters() {
      currentFilters = {
        email: emailFilter?.value || "",
        name: nameFilter?.value || "",
        date: dateFilter?.value || "",
      };

      currentPage = 1; // Reset to first page
      loadContactData();
    }

    // Function to load contact data with current filters and pagination
    async function loadContactData() {
      if (!contactTableBody) return;

      // Show loading state
      contactTableBody.innerHTML = `
        <tr>
          <td colspan="5" class="text-center py-5">
            <div class="loading-spinner mb-3 mx-auto"></div>
            <div class="text-muted">Loading messages...</div>
          </td>
        </tr>
      `;

      try {
        // Add a small delay to show the loading state (for better UX)
        await new Promise((resolve) => setTimeout(resolve, 300));

        // Fetch data using our updated specialized function
        const data = await fetchContactMessages<ContactData>(
          currentPage,
          itemsPerPage,
          currentFilters
        );

        // Update the UI with new data
        updateContactTable(data);
        updatePaginationUI(data);
      } catch (error) {
        console.error("Error in loadContactData:", error);
        contactTableBody.innerHTML = `
          <tr>
            <td colspan="5" class="text-center py-5">
              <div class="text-danger mb-3">
                <i class="fas fa-exclamation-circle fa-3x"></i>
              </div>
              <h5 class="text-danger">Failed to load messages</h5>
              <p class="text-muted">Please try again later or contact support.</p>
              <button class="btn btn-outline-primary mt-3" id="retryLoadBtn">
                <i class="fas fa-sync me-2"></i>Retry
              </button>
            </td>
          </tr>
        `;

        // Add retry button handler
        const retryBtn = contactTableBody.querySelector("#retryLoadBtn");
        if (retryBtn) {
          retryBtn.addEventListener("click", () => {
            loadContactData();
          });
        }
      }
    }

    // Function to update contact table with data
    function updateContactTable(data: ContactData) {
      if (!contactTableBody) return;

      if (!data.messages || data.messages.length === 0) {
        contactTableBody.innerHTML = `
          <tr>
            <td colspan="5" class="text-center py-4 text-muted">
              <i class="fas fa-inbox fa-2x mb-3"></i>
              <div>No messages found</div>
              <div class="small mt-2">
                ${data.total === 0 ? "You haven't received any contact messages yet." : "No messages match your current filters."}
              </div>
            </td>
          </tr>
        `;
        return;
      }

      // Clear existing content
      contactTableBody.innerHTML = "";

      // Populate with new data
      data.messages.forEach((message) => {
        const tr = document.createElement("tr");
        tr.dataset.id = message.id;

        // Format date
        const messageDate = new Date(message.created_at).toLocaleDateString();

        // Truncate message for table display
        const truncatedMessage =
          message.message.length > 50
            ? `${message.message.substring(0, 47)}...`
            : message.message;

        tr.innerHTML = `
          <td>${message.name}</td>
          <td><a href="mailto:${message.email}">${message.email}</a></td>
          <td>${truncatedMessage}</td>
          <td>${messageDate}</td>
          <td>
            <div class="btn-group btn-group-sm">
              <button class="btn btn-sm btn-outline-primary view-btn" data-id="${message.id}">
                <i class="fas fa-eye"></i>
              </button>
              <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${message.id}">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </td>
        `;

        contactTableBody.appendChild(tr);

        // Add event listeners to buttons
        const viewBtn = tr.querySelector(".view-btn");
        if (viewBtn) {
          viewBtn.addEventListener("click", () => {
            viewContactMessage(message.id);
          });
        }

        const deleteBtn = tr.querySelector(".delete-btn");
        if (deleteBtn) {
          deleteBtn.addEventListener("click", () => {
            confirmDeleteMessage(message.id, message.name);
          });
        }
      });

      // Update total count display
      const totalMessagesEl = document.getElementById("totalMessages");
      if (totalMessagesEl) {
        totalMessagesEl.textContent = data.total.toString();
      }

      // Update pagination info
      const showingFrom = document.getElementById("showingFrom");
      const showingTo = document.getElementById("showingTo");
      const showingTotal = document.getElementById("showingTotal");

      if (showingFrom) {
        showingFrom.textContent = data.messages.length
          ? ((data.page - 1) * data.limit + 1).toString()
          : "0";
      }

      if (showingTo) {
        showingTo.textContent = Math.min(
          data.page * data.limit,
          data.total
        ).toString();
      }

      if (showingTotal) {
        showingTotal.textContent = data.total.toString();
      }
    }

    // Function to update pagination UI based on current data
    function updatePaginationUI(data: ContactData) {
      if (!pagination) return;

      // Clear existing page numbers (but keep prev/next buttons)
      const pageItems = pagination.querySelectorAll(
        "li:not(:first-child):not(:last-child)"
      );
      pageItems.forEach((item) => item.remove());

      // Update previous/next button states
      const prevPageItem = pagination.querySelector("li:first-child");
      const nextPageItem = pagination.querySelector("li:last-child");

      if (prevPageItem) {
        if (currentPage <= 1) {
          prevPageItem.classList.add("disabled");
        } else {
          prevPageItem.classList.remove("disabled");
        }
      }

      if (nextPageItem) {
        if (currentPage >= data.total_pages) {
          nextPageItem.classList.add("disabled");
        } else {
          nextPageItem.classList.remove("disabled");
        }
      }

      // Don't add page numbers if no pages
      if (data.total_pages <= 1) return;

      // Determine which page numbers to show (max 5)
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(data.total_pages, startPage + 4);

      // Adjust if we're near the end
      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }

      // Create page number elements
      for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement("li");
        li.className = `page-item ${i === currentPage ? "active" : ""}`;

        const a = document.createElement("a");
        a.className = "page-link";
        a.href = "#";
        a.textContent = i.toString();

        // Add click event
        a.addEventListener("click", (e) => {
          e.preventDefault();
          currentPage = i;
          loadContactData();
        });

        li.appendChild(a);

        // Insert before the "Next" button
        if (nextPageItem) {
          pagination.insertBefore(li, nextPageItem);
        } else {
          pagination.appendChild(li);
        }
      }
    }

    // Function to view a single contact message
    async function viewContactMessage(id: string) {
      try {
        // Reset current message data
        currentMessageData = null;

        // Show loading state first
        const modalName = document.getElementById("modalName");
        const modalEmail = document.getElementById("modalEmail");
        const modalDate = document.getElementById("modalDate");
        const modalMessage = document.getElementById("modalMessage");

        if (modalName) modalName.textContent = "Loading...";
        if (modalEmail) modalEmail.innerHTML = "Loading...";
        if (modalDate) modalDate.textContent = "Loading...";
        if (modalMessage)
          modalMessage.textContent = "Loading message content...";

        // Show modal while loading
        const modal = new bootstrap.Modal(
          document.getElementById("viewMessageModal")
        );
        modal.show();

        // Fetch the specific message with explicit options
        console.log(`Fetching message details for ID: ${id}`);
        const message = await apiRequest<ContactMessage>(
          `/admin/contacts/${id}`,
          {
            method: "GET",
            requiresAuth: true,
            headers: {
              // Ensure correct content type
              "Content-Type": "application/json",
              Accept: "application/json",
            },
          }
        );

        console.log("Message details received:", message);

        // Track the current message for reply functionality
        currentMessageData = message;

        // Populate modal with data
        if (modalName) modalName.textContent = message.name || "N/A";
        if (modalEmail) {
          if (message.email) {
            modalEmail.innerHTML = `<a href="mailto:${message.email}">${message.email}</a>`;
          } else {
            modalEmail.textContent = "N/A";
          }
        }
        if (modalDate) {
          if (message.created_at) {
            const date = new Date(message.created_at);
            modalDate.textContent = date.toLocaleString();
          } else {
            modalDate.textContent = "N/A";
          }
        }
        if (modalMessage)
          modalMessage.textContent = message.message || "No message content";

        // Enable reply button if we have an email
        const replyBtn = document.getElementById(
          "replyBtn"
        ) as HTMLAnchorElement;
        if (replyBtn) {
          if (message.email) {
            replyBtn.classList.remove("disabled");
          } else {
            replyBtn.classList.add("disabled");
          }
        }
      } catch (error) {
        console.error("Error fetching message details:", error);

        // Try to keep the modal open to show the error
        const modalMessage = document.getElementById("modalMessage");
        if (modalMessage) {
          modalMessage.innerHTML = `
            <div class="alert alert-danger">
              <strong>Error:</strong> Failed to load message details. 
              ${error instanceof Error ? error.message : "Unknown error"}
            </div>
          `;
        }

        // Disable reply button on error
        const replyBtn = document.getElementById(
          "replyBtn"
        ) as HTMLAnchorElement;
        if (replyBtn) {
          replyBtn.classList.add("disabled");
        }

        // Show error toast if available
        if (typeof window !== "undefined" && window.showToast) {
          window.showToast(
            `Failed to load message details: ${error instanceof Error ? error.message : "Unknown error"}`,
            "error"
          );
        }
      }
    }

    // Function to export contact data
    async function exportContactData() {
      try {
        // Build query string with current filters
        const queryParams = new URLSearchParams();

        if (currentFilters.email)
          queryParams.append("email", currentFilters.email);
        if (currentFilters.name)
          queryParams.append("name", currentFilters.name);
        if (currentFilters.date)
          queryParams.append("date", currentFilters.date);

        const queryString = queryParams.toString();
        const downloadUrl = `/admin/contacts/export${queryString ? `?${queryString}` : ""}`;

        // Create a temporary link element to trigger download
        const link = document.createElement("a");
        // Use the correct base URL from env variables or config
        const baseApiUrl =
          import.meta.env.PUBLIC_EXPRESS_URL || "http://localhost:8001";
        link.href = `${baseApiUrl}${downloadUrl}`;
        link.target = "_blank";
        link.download = "contact-messages.csv";

        // Append to body, click, and remove
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        // Show success message
        if (typeof window !== "undefined" && window.showToast) {
          window.showToast(
            "Export started. Check your downloads folder.",
            "success"
          );
        }
      } catch (error) {
        console.error("Error exporting contact data:", error);

        // Show error toast if available
        if (typeof window !== "undefined" && window.showToast) {
          window.showToast(
            `Failed to export data: ${error instanceof Error ? error.message : "Unknown error"}`,
            "error"
          );
        } else {
          alert("Failed to export data. Please try again.");
        }
      }
    }

    // Function to handle contact message deletion confirmation
    function confirmDeleteMessage(id: string, name: string) {
      if (
        confirm(
          `Are you sure you want to delete the message from ${name || "this contact"}?`
        )
      ) {
        deleteContactMessage(id);
      }
    }

    // Show loading state for UI operations
    function showLoadingState() {
      const loadingOverlay = document.getElementById("loadingOverlay");
      if (loadingOverlay) {
        loadingOverlay.classList.remove("d-none");
      } else {
        // Create loading overlay if it doesn't exist
        const overlay = document.createElement("div");
        overlay.id = "loadingOverlay";
        overlay.className =
          "position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-dark bg-opacity-50";
        overlay.style.zIndex = "9999";
        overlay.innerHTML = `
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        `;
        document.body.appendChild(overlay);
      }
    }

    // Hide loading state
    function hideLoadingState() {
      const loadingOverlay = document.getElementById("loadingOverlay");
      if (loadingOverlay) {
        loadingOverlay.classList.add("d-none");
      }
    }

    // Function to delete a contact message
    async function deleteContactMessage(id: string) {
      try {
        showLoadingState();

        await apiRequest(`/admin/contacts/${id}`, {
          method: "DELETE",
          requiresAuth: true,
        });

        // Refresh the data after deletion
        loadContactData();

        // Show success message
        if (typeof window !== "undefined" && window.showToast) {
          window.showToast("Message deleted successfully", "success");
        }
      } catch (error) {
        console.error("Error deleting message:", error);

        // Show error toast if available
        if (typeof window !== "undefined" && window.showToast) {
          window.showToast(
            `Failed to delete message: ${error instanceof Error ? error.message : "Unknown error"}`,
            "error"
          );
        }
      } finally {
        hideLoadingState();
      }
    }

    // Expose loadContactData to window for use in auth check script
    window.loadContactData = loadContactData;

    // Set confirmDeleteMessage function for global access
    window.confirmDeleteMessage = confirmDeleteMessage;
  });
</script>
