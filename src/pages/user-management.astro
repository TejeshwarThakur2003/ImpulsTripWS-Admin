---
import AdminLayout from "../layouts/AdminLayout.astro";
import { apiRequest } from "../utils/api";

// Define types
interface User {
  id: string;
  name: string;
  email: string;
  role: "admin" | "editor" | "viewer";
  active: boolean;
  last_login?: string;
  permissions?: Record<string, boolean>;
}

// Define backend user type that comes from the API
interface BackendUser {
  _id: string;
  username: string;
  name: string;
  role: "admin" | "editor" | "viewer";
  active: boolean;
  lastLogin?: string;
  permissions?: Record<string, boolean>;
}

interface UserData {
  users: User[];
  total: number;
  total_pages: number;
  page: number;
  limit: number;
}

// Default empty state
const defaultUserData: UserData = {
  users: [],
  total: 0,
  total_pages: 0,
  page: 1,
  limit: 10,
};

// Try to fetch initial user data
let userData: UserData = defaultUserData;
try {
  const response: any = await apiRequest("/admin/auth/users");
  console.log("Initial admin users response:", response);

  // Transform response if it's an array (from our backend)
  if (Array.isArray(response)) {
    userData = {
      users: response.map((user) => ({
        id: user._id,
        name: user.name || user.username,
        email: user.username,
        role: user.role,
        active: user.active,
        last_login: user.lastLogin,
      })),
      total: response.length,
      total_pages: 1,
      page: 1,
      limit: 10,
    };
    console.log("Transformed user data:", userData);
  } else if (response && typeof response === "object" && response.users) {
    // Handle structured response format if the API returns that format
    userData = response;
  }
} catch (error) {
  console.error("Error fetching user data:", error);
}
---

<AdminLayout title="User Management" currentPage="user-management">
  <div class="container">
    <div class="row mb-4">
      <div class="col-md-8">
        <h2>User Management</h2>
        <p class="text-muted">Manage admin accounts and permissions</p>
      </div>
      <div class="col-md-4 text-end">
        <button id="addUserBtn" class="btn btn-primary">
          <i class="fas fa-user-plus me-2"></i>Add User
        </button>
      </div>
    </div>

    <!-- Users Table -->
    <div class="users-card">
      <div
        class="users-card-header d-flex justify-content-between align-items-center"
      >
        <h5><i class="fas fa-users me-2"></i>Admin Users</h5>
        <div class="d-flex align-items-center">
          <div class="me-3">
            <select id="roleFilter" class="form-select form-select-sm">
              <option value="">All Roles</option>
              <option value="admin">Admin</option>
              <option value="editor">Editor</option>
              <option value="viewer">Viewer</option>
            </select>
          </div>
          <div class="search-box">
            <input
              type="text"
              id="searchUsers"
              class="form-control form-control-sm"
              placeholder="Search users..."
            />
          </div>
        </div>
      </div>
      <div class="users-card-body">
        <div class="table-responsive">
          <table class="table table-dark">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Last Login</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="usersTableBody">
              {
                userData.users.length > 0 ? (
                  userData.users.map((user) => (
                    <tr data-user-id={user.id}>
                      <td>
                        <div class="d-flex align-items-center">
                          <div class="user-avatar me-2">
                            {user.name.charAt(0)}
                          </div>
                          <div>{user.name}</div>
                        </div>
                      </td>
                      <td>{user.email}</td>
                      <td>
                        <span class="badge role-badge">{user.role}</span>
                      </td>
                      <td>
                        {user.last_login
                          ? new Date(user.last_login).toLocaleString()
                          : "Never"}
                      </td>
                      <td>
                        <span
                          class={`badge ${user.active ? "bg-success" : "bg-danger"}`}
                        >
                          {user.active ? "Active" : "Inactive"}
                        </span>
                      </td>
                      <td>
                        <button
                          class="btn btn-sm btn-outline-primary edit-user-btn"
                          data-user-id={user.id}
                        >
                          <i class="fas fa-edit" />
                        </button>
                        <button
                          class="btn btn-sm btn-outline-danger delete-user-btn"
                          data-user-id={user.id}
                        >
                          <i class="fas fa-trash-alt" />
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colspan="6" class="text-center">
                      No users found
                    </td>
                  </tr>
                )
              }
            </tbody>
          </table>
        </div>
      </div>
      <div class="users-card-footer">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <button
              id="prevPageBtn"
              class="btn btn-sm btn-outline-primary"
              disabled={userData.page <= 1}
            >
              <i class="fas fa-chevron-left me-1"></i>Previous
            </button>
            <button
              id="nextPageBtn"
              class="btn btn-sm btn-outline-primary ms-2"
              disabled={userData.page >= userData.total_pages}
            >
              Next<i class="fas fa-chevron-right ms-1"></i>
            </button>
          </div>
          <div>
            Page <span id="currentPage">{userData.page}</span> of
            <span id="totalPages">{userData.total_pages}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- User Activity Log -->
    <div class="users-card mt-4">
      <div
        class="users-card-header d-flex justify-content-between align-items-center"
      >
        <h5><i class="fas fa-history me-2"></i>Recent Activity</h5>
        <div>
          <span class="badge bg-warning text-dark">Sample Data</span>
        </div>
      </div>
      <div class="users-card-body">
        <div class="table-responsive">
          <table class="table table-dark">
            <thead>
              <tr>
                <th>User</th>
                <th>Action</th>
                <th>Date/Time</th>
                <th>IP Address</th>
              </tr>
            </thead>
            <tbody id="activityLogBody">
              <!-- Sample activity log data - will be replaced by real data when API is available -->
              <tr>
                <td>Admin</td>
                <td>Updated site settings</td>
                <td>Today, 10:45 AM</td>
                <td>192.168.1.1</td>
              </tr>
              <tr>
                <td>Editor</td>
                <td>Published new blog post</td>
                <td>Yesterday, 3:20 PM</td>
                <td>192.168.1.2</td>
              </tr>
              <tr>
                <td>Admin</td>
                <td>Added new user</td>
                <td>Jun 12, 2023</td>
                <td>192.168.1.1</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Add/Edit User Modal -->
    <div class="modal fade" id="userModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
          <div class="modal-header">
            <h5 class="modal-title" id="userModalTitle">Add User</h5>
            <button
              type="button"
              class="btn-close btn-close-white"
              data-bs-dismiss="modal"
              aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="userForm">
              <input type="hidden" id="userId" />

              <div class="mb-3">
                <label for="userName" class="form-label">Name</label>
                <input
                  type="text"
                  class="form-control"
                  id="userName"
                  required
                />
              </div>

              <div class="mb-3">
                <label for="userEmail" class="form-label">Email</label>
                <input
                  type="email"
                  class="form-control"
                  id="userEmail"
                  required
                />
              </div>

              <div class="mb-3">
                <label for="userRole" class="form-label">Role</label>
                <select class="form-select" id="userRole">
                  <option value="admin">Admin</option>
                  <option value="editor">Editor</option>
                  <option value="viewer">Viewer</option>
                </select>
              </div>

              <div id="passwordSection" class="mb-3">
                <label for="userPassword" class="form-label">Password</label>
                <input type="password" class="form-control" id="userPassword" />
                <div class="form-text">
                  Leave blank to keep current password (for editing).
                </div>
              </div>

              <div class="mb-3 form-check">
                <input
                  type="checkbox"
                  class="form-check-input"
                  id="userActive"
                  checked
                />
                <label class="form-check-label" for="userActive">Active</label>
              </div>

              <div class="mb-3">
                <label class="form-label">Permissions</label>

                <div class="permission-section mb-2">
                  <h6>Blog</h6>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permBlogView"
                      checked
                    />
                    <label class="form-check-label" for="permBlogView"
                      >View</label
                    >
                  </div>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permBlogEdit"
                      checked
                    />
                    <label class="form-check-label" for="permBlogEdit"
                      >Edit</label
                    >
                  </div>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permBlogDelete"
                    />
                    <label class="form-check-label" for="permBlogDelete"
                      >Delete</label
                    >
                  </div>
                </div>

                <div class="permission-section mb-2">
                  <h6>Users</h6>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permUsersView"
                      checked
                    />
                    <label class="form-check-label" for="permUsersView"
                      >View</label
                    >
                  </div>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permUsersEdit"
                    />
                    <label class="form-check-label" for="permUsersEdit"
                      >Edit</label
                    >
                  </div>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permUsersDelete"
                    />
                    <label class="form-check-label" for="permUsersDelete"
                      >Delete</label
                    >
                  </div>
                </div>

                <div class="permission-section mb-2">
                  <h6>Settings</h6>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permSettingsView"
                      checked
                    />
                    <label class="form-check-label" for="permSettingsView"
                      >View</label
                    >
                  </div>
                  <div class="form-check form-check-inline">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      id="permSettingsEdit"
                    />
                    <label class="form-check-label" for="permSettingsEdit"
                      >Edit</label
                    >
                  </div>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-outline-secondary"
              data-bs-dismiss="modal">Cancel</button
            >
            <button type="button" class="btn btn-primary" id="saveUserBtn"
              >Save User</button
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<style>
  .users-card {
    background-color: #1a1a1a;
    border: 1px solid #333;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .users-card-header {
    background-color: rgba(0, 0, 0, 0.3);
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #333;
  }

  .users-card-body {
    padding: 1.5rem;
  }

  .users-card-footer {
    padding: 1rem 1.5rem;
    background-color: rgba(0, 0, 0, 0.2);
    border-top: 1px solid #333;
  }

  .user-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: var(--primary);
    color: var(--dark);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
  }

  .badge {
    font-size: 0.75rem;
    padding: 0.35em 0.65em;
  }

  .role-badge {
    background-color: #6c757d;
  }

  .role-badge.admin {
    background-color: #dc3545;
  }

  .role-badge.editor {
    background-color: #fd7e14;
  }

  .role-badge.viewer {
    background-color: #0dcaf0;
  }

  .form-control,
  .form-select {
    background-color: #212529;
    border-color: #495057;
    color: #e9ecef;
  }

  .form-control:focus,
  .form-select:focus {
    background-color: #2c3034;
    color: #e9ecef;
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(255, 243, 0, 0.25);
  }

  .modal-content {
    border: 1px solid #333;
  }

  .permission-section h6 {
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
  }
</style>

<script>
  import { apiRequest } from "../utils/api";
  import type { BootstrapInterface } from "../utils/bootstrap-types";

  // Use type assertion for Bootstrap to fix TypeScript errors
  const bootstrap = window.bootstrap as any;

  // TypeScript interfaces
  interface User {
    id: string;
    name: string;
    email: string;
    role: "admin" | "editor" | "viewer";
    active: boolean;
    last_login?: string;
    permissions?: Record<string, boolean>;
  }

  interface UserData {
    users: User[];
    total: number;
    total_pages: number;
    page: number;
    limit: number;
  }

  // Backend user interface that matches the server response format
  interface BackendUser {
    _id: string;
    username: string;
    name: string;
    role: "admin" | "editor" | "viewer";
    active: boolean;
    lastLogin?: string;
    permissions?: Record<string, boolean>;
  }

  // State variables
  let currentPage = 1;
  let searchTerm = "";
  let roleFilter = "";
  let isEditMode = false;
  let totalPages = 0;
  let currentUserIsAdmin = false;
  let currentUserId = ""; // To track the current logged-in user

  document.addEventListener("DOMContentLoaded", function () {
    // Initialize the UI elements
    initEventListeners();
    updateRoleBadgeColors();

    // Check if current user is admin
    checkCurrentUserRole();

    // Fetch fresh user data on page load
    fetchUsers();
  });

  function initEventListeners() {
    // Add user button
    document.getElementById("addUserBtn")?.addEventListener("click", () => {
      openUserModal();
    });

    // Pagination
    document.getElementById("prevPageBtn")?.addEventListener("click", () => {
      if (currentPage > 1) {
        currentPage--;
        fetchUsers();
      }
    });

    document.getElementById("nextPageBtn")?.addEventListener("click", () => {
      currentPage++;
      fetchUsers();
    });

    // Search and filter
    document.getElementById("searchUsers")?.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      searchTerm = target.value;
      currentPage = 1; // Reset to first page
      fetchUsers();
    });

    document.getElementById("roleFilter")?.addEventListener("change", (e) => {
      const target = e.target as HTMLSelectElement;
      roleFilter = target.value;
      currentPage = 1; // Reset to first page
      fetchUsers();
    });

    // Edit and delete user buttons (delegated)
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (target.closest(".edit-user-btn")) {
        const button = target.closest(".edit-user-btn") as HTMLElement;
        const userId = button.getAttribute("data-user-id");
        if (userId) openUserModal(userId);
      } else if (target.closest(".delete-user-btn")) {
        const button = target.closest(".delete-user-btn") as HTMLElement;
        const userId = button.getAttribute("data-user-id");
        if (userId) confirmDeleteUser(userId);
      }
    });

    // Save user button
    document.getElementById("saveUserBtn")?.addEventListener("click", saveUser);

    // Role change affects permissions
    document
      .getElementById("userRole")
      ?.addEventListener("change", updatePermissionsByRole);
  }

  function updateRoleBadgeColors() {
    const roleBadges = document.querySelectorAll(".role-badge");
    roleBadges.forEach((badge) => {
      const role = badge.textContent?.toLowerCase();
      if (role) {
        badge.classList.add(role);
      }
    });
  }

  async function fetchUsers(
    page = currentPage,
    search = searchTerm,
    role = roleFilter
  ) {
    try {
      console.log(
        `Fetching users with page=${page}, search=${search}, role=${role}`
      );

      // Convert filters and pagination to query params
      const params = new URLSearchParams();

      // Only add pagination if we have more than one page
      if (page > 1) {
        params.append("page", page.toString());
      }

      // Add search term if provided
      if (search) params.append("search", search);

      // Add role filter if provided
      if (role) params.append("role", role);

      // Fetch users from API
      const queryString = params.toString();
      const endpoint = `/admin/auth/users${queryString ? `?${queryString}` : ""}`;
      console.log(`Making API request to: ${endpoint}`);

      // Make the API request - use any for now to avoid type issues
      const data: any = await apiRequest(endpoint);
      console.log("User data received:", data);

      // Transform the data to match our expected format if it's an array (direct backend response)
      let userData: UserData;

      if (Array.isArray(data)) {
        userData = {
          users: data.map((user) => ({
            id: user._id,
            name: user.name || user.username,
            email: user.username,
            role: user.role,
            active: user.active,
            last_login: user.lastLogin,
          })),
          total: data.length,
          total_pages: 1,
          page: 1,
          limit: 10,
        };
      } else if (data && typeof data === "object" && data.users) {
        // It's already in the right format
        userData = data as UserData;
      } else {
        // If we got an unexpected response format, show an empty list
        userData = {
          users: [],
          total: 0,
          total_pages: 0,
          page: 1,
          limit: 10,
        };
        console.error("Unexpected API response format:", data);
      }

      // Update the table with the transformed data
      updateUsersTable(userData);

      // Update pagination controls
      updatePaginationUI(userData);
    } catch (error) {
      console.error("Error fetching users:", error);
      // Show error message in the table
      const tableBody = document.getElementById("usersTableBody");
      if (tableBody) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center text-danger">
              Error loading users: ${error instanceof Error ? error.message : "Unknown error"}
            </td>
          </tr>
        `;
      }
    }
  }

  function updateUsersTable(data: UserData) {
    const tableBody = document.getElementById("usersTableBody");
    if (!tableBody) return;

    // Clear existing rows
    tableBody.innerHTML = "";

    // No users case
    if (data.users.length === 0) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center">No users found</td>
        </tr>
      `;
      return;
    }

    // Add rows for each user
    data.users.forEach((user) => {
      const row = document.createElement("tr");
      row.setAttribute("data-user-id", user.id);

      row.innerHTML = `
        <td>
          <div class="d-flex align-items-center">
            <div class="user-avatar me-2">${user.name.charAt(0)}</div>
            <div>${user.name}</div>
          </div>
        </td>
        <td>${user.email}</td>
        <td><span class="badge role-badge ${user.role}">${user.role}</span></td>
        <td>${user.last_login ? new Date(user.last_login).toLocaleString() : "Never"}</td>
        <td>
          <span class="badge ${user.active ? "bg-success" : "bg-danger"}">
            ${user.active ? "Active" : "Inactive"}
          </span>
        </td>
        <td>
          <button class="btn btn-sm btn-outline-primary edit-user-btn" data-user-id="${user.id}">
            <i class="fas fa-edit"></i>
          </button>
          <button class="btn btn-sm btn-outline-danger delete-user-btn" data-user-id="${user.id}">
            <i class="fas fa-trash-alt"></i>
          </button>
        </td>
      `;

      tableBody.appendChild(row);
    });
  }

  function updatePaginationUI(data: UserData) {
    const currentPageEl = document.getElementById("currentPage");
    const totalPagesEl = document.getElementById("totalPages");

    if (currentPageEl) currentPageEl.textContent = data.page.toString();
    if (totalPagesEl) totalPagesEl.textContent = data.total_pages.toString();

    // Update pagination buttons state
    const prevBtn = document.getElementById("prevPageBtn") as HTMLButtonElement;
    const nextBtn = document.getElementById("nextPageBtn") as HTMLButtonElement;

    if (prevBtn) prevBtn.disabled = data.page <= 1;
    if (nextBtn) nextBtn.disabled = data.page >= data.total_pages;
  }

  async function openUserModal(userId?: string) {
    const modalTitle = document.getElementById("userModalTitle");
    const passwordSection = document.getElementById("passwordSection");
    const userIdField = document.getElementById("userId") as HTMLInputElement;

    // Reset form
    const userForm = document.getElementById("userForm");
    if (userForm instanceof HTMLFormElement) {
      userForm.reset();
    }

    if (userId) {
      // Edit mode
      isEditMode = true;
      if (modalTitle) modalTitle.textContent = "Edit User";
      if (passwordSection) {
        passwordSection.querySelector(".form-text")!.textContent =
          "Leave blank to keep current password.";
      }

      try {
        console.log("Fetching user details for ID:", userId);

        // Fetch user details
        const user = await apiRequest<BackendUser>(
          `/admin/auth/users/${userId}`
        );
        console.log("Received user details:", user);

        // Fill form with the MongoDB _id (not the .id property)
        if (userIdField) userIdField.value = user._id || userId;
        console.log("Set user ID field to:", userIdField?.value);

        const nameField = document.getElementById(
          "userName"
        ) as HTMLInputElement;
        const emailField = document.getElementById(
          "userEmail"
        ) as HTMLInputElement;
        const roleField = document.getElementById(
          "userRole"
        ) as HTMLSelectElement;
        const activeField = document.getElementById(
          "userActive"
        ) as HTMLInputElement;

        if (nameField) nameField.value = user.name || "";
        if (emailField) emailField.value = user.username || "";
        if (roleField) roleField.value = user.role || "editor";
        if (activeField) activeField.checked = user.active !== false;

        // Fill permissions if available
        if (user.permissions) {
          Object.entries(user.permissions).forEach(([key, value]) => {
            const permField = document.getElementById(
              `perm${key}`
            ) as HTMLInputElement;
            if (permField) permField.checked = value;
          });
        }
      } catch (error) {
        console.error("Error fetching user details:", error);
        alert("Failed to load user details. Please try again.");
        return;
      }
    } else {
      // Add mode
      isEditMode = false;
      if (modalTitle) modalTitle.textContent = "Add User";
      if (passwordSection) {
        passwordSection.querySelector(".form-text")!.textContent =
          "Password for the new user.";
      }
      if (userIdField) userIdField.value = "";

      // Set default permissions based on role
      updatePermissionsByRole();
    }

    // Show modal
    const modalEl = document.getElementById("userModal");
    if (modalEl) {
      const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
      modal.show();
    }
  }

  function updatePermissionsByRole() {
    const roleField = document.getElementById("userRole") as HTMLSelectElement;
    if (!roleField) return;

    const role = roleField.value;

    // Set permissions based on role
    if (role === "admin") {
      // Admins get all permissions
      setAllPermissions(true);
    } else if (role === "editor") {
      // Editors can view everything, edit blog, but not users or settings
      document.querySelectorAll('[id^="permBlog"]').forEach((el) => {
        (el as HTMLInputElement).checked = true;
      });

      document.querySelectorAll('[id^="permUsers"]').forEach((el) => {
        (el as HTMLInputElement).checked = el.id === "permUsersView";
      });

      document.querySelectorAll('[id^="permSettings"]').forEach((el) => {
        (el as HTMLInputElement).checked = el.id === "permSettingsView";
      });
    } else if (role === "viewer") {
      // Viewers can only view
      document
        .querySelectorAll('input[type="checkbox"][id^="perm"]')
        .forEach((el) => {
          (el as HTMLInputElement).checked = el.id.endsWith("View");
        });
    }
  }

  function setAllPermissions(value: boolean) {
    document
      .querySelectorAll('input[type="checkbox"][id^="perm"]')
      .forEach((el) => {
        (el as HTMLInputElement).checked = value;
      });
  }

  async function saveUser() {
    try {
      // Collect form data
      const userId = (document.getElementById("userId") as HTMLInputElement)
        ?.value;
      const name = (document.getElementById("userName") as HTMLInputElement)
        ?.value;
      const email = (document.getElementById("userEmail") as HTMLInputElement)
        ?.value;
      const role = (document.getElementById("userRole") as HTMLSelectElement)
        ?.value;
      const password = (
        document.getElementById("userPassword") as HTMLInputElement
      )?.value;
      const active = (document.getElementById("userActive") as HTMLInputElement)
        ?.checked;

      if (!name || !email) {
        alert("Name and email are required");
        return;
      }

      // If we're changing an admin to non-admin, verify it's not the last admin
      if (isEditMode) {
        const currentRoleEl = document.querySelector(
          `tr[data-user-id="${userId}"] .role-badge`
        );
        const currentRole = currentRoleEl?.textContent?.toLowerCase() || "";

        if (currentRole === "admin" && role !== "admin") {
          const adminCount =
            document.querySelectorAll(".role-badge.admin").length;
          if (adminCount <= 1) {
            alert("Cannot change role. At least one admin must exist.");
            return;
          }
        }
      }

      // Collect permissions
      const permissions: Record<string, boolean> = {};
      document
        .querySelectorAll('input[type="checkbox"][id^="perm"]')
        .forEach((el) => {
          const permName = el.id.replace("perm", "");
          permissions[permName] = (el as HTMLInputElement).checked;
        });

      // Log the data we're saving
      console.log("Saving user with ID:", userId);
      console.log("isEditMode:", isEditMode);

      // Create user object in the format the backend expects
      const userData: any = {
        name,
        username: email, // backend uses username field
        role: role as "admin" | "editor" | "viewer",
        active,
        permissions,
      };

      // Only include password if provided (for editing)
      if (password) {
        userData.password = password;
      }

      // Save user
      if (isEditMode && userId) {
        console.log(`Updating user ${userId} with data:`, userData);

        // Update existing user
        await apiRequest(`/admin/auth/users/${userId}`, {
          method: "PUT",
          body: userData,
        });

        alert(
          "User updated successfully. Note: Only one admin can exist at a time. If you made this user an admin, any previous admin has been demoted to editor."
        );
      } else {
        // Create new user
        if (!password) {
          alert("Password is required for new users.");
          return;
        }

        console.log("Creating new user with data:", userData);

        await apiRequest("/admin/auth/users", {
          method: "POST",
          body: userData,
        });

        alert(
          "User created successfully. Note: Only one admin can exist at a time. If you created an admin, any previous admin has been demoted to editor."
        );
      }

      // Close modal
      const modalEl = document.getElementById("userModal");
      if (modalEl) {
        const modal = bootstrap.Modal.getInstance(modalEl);
        if (modal) modal.hide();
      }

      // Refresh user list to see updated roles
      fetchUsers();
    } catch (error) {
      console.error("Error saving user:", error);
      alert(
        `Failed to save user: ${error instanceof Error ? error.message : "Unknown error"}`
      );
    }
  }

  async function confirmDeleteUser(userId: string) {
    // Prevent deleting your own account
    if (userId === currentUserId) {
      alert("You cannot delete your own account.");
      return;
    }

    if (
      confirm(
        "Are you sure you want to delete this user? This cannot be undone."
      )
    ) {
      try {
        const response = await apiRequest(`/admin/auth/users/${userId}`, {
          method: "DELETE",
        });

        // Show success message
        alert(
          "User deleted successfully. If you deleted an admin, the admin role has been transferred to the oldest active user."
        );

        // Refresh users to see the updated roles
        fetchUsers();
      } catch (error) {
        console.error("Error deleting user:", error);

        // Show specific error message if available
        if (error instanceof Error) {
          if (error.message.includes("last admin")) {
            alert(
              "Cannot delete the last admin user. At least one admin must exist."
            );
          } else {
            alert(`Failed to delete user: ${error.message}`);
          }
        } else {
          alert("Failed to delete user. Please try again.");
        }
      }
    }
  }

  // Initialize modals
  document.addEventListener("DOMContentLoaded", () => {
    // User form handling
    const userForm = document.getElementById("userForm");
    const addUserBtn = document.getElementById("addUserBtn");
    const userModal = document.getElementById("userModal");

    if (addUserBtn && userModal && userForm) {
      addUserBtn.addEventListener("click", () => {
        if (userForm instanceof HTMLFormElement) {
          userForm.reset();
        }
        bootstrap.Modal.getOrCreateInstance(userModal).show();
      });
    }

    // Edit user handler - attach to parent element using event delegation
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains("edit-user-btn") && userModal && userForm) {
        const userId = target.getAttribute("data-user-id");
        // In a real app, fetch user data by ID and populate form
        console.log("Edit user:", userId);
        bootstrap.Modal.getOrCreateInstance(userModal).show();
      }
    });
  });

  // Function to check current user's role
  async function checkCurrentUserRole() {
    try {
      const response: any = await apiRequest("/admin/auth/validate-token");
      if (response && response.user) {
        currentUserIsAdmin = response.user.role === "admin";
        currentUserId = response.user.id;
        console.log("Current user is admin:", currentUserIsAdmin);
        console.log("Current user ID:", currentUserId);
      }
    } catch (error) {
      console.error("Error checking user role:", error);
    }
  }
</script>
