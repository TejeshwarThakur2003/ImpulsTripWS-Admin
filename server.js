#!/usr/bin/env node

/**
 * Production server starter for the ImpulsTrip Admin Dashboard
 * This file is the entry point for the Node.js server process
 */

// Load environment variables from .env file
import 'dotenv/config';

// Import the standalone server entry point generated by Astro
import { handler } from './dist/server/entry.mjs';
import express from 'express';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import compression from 'compression';
import helmet from 'helmet';
import cookieParser from 'cookie-parser';

// Constants
const PORT = process.env.PORT || 8082;
const NODE_ENV = process.env.NODE_ENV || 'production';
const __dirname = dirname(fileURLToPath(import.meta.url));
const DIST_DIR = join(__dirname, 'dist');
const CLIENT_DIR = join(DIST_DIR, 'client');

// Create Express app
const app = express();

// Security headers with Helmet
app.use(helmet({
  contentSecurityPolicy: {
    directives: process.env.PUBLIC_CSP_DIRECTIVES ? 
      JSON.parse(process.env.PUBLIC_CSP_DIRECTIVES) : 
      undefined
  }
}));

// Parse cookies
app.use(cookieParser());

// Request logging for debugging
app.use((req, res, next) => {
  if (NODE_ENV !== 'production') {
    console.log(`${req.method} ${req.url}`);
  }
  next();
});

// Compression for better performance
app.use(compression());

// Serve static files with proper caching
app.use(express.static(CLIENT_DIR, {
  maxAge: NODE_ENV === 'production' ? '7d' : 0
}));

// For all routes, use the Astro SSR handler
app.use(handler);

// Start the server with error handling
const server = app.listen(PORT, () => {
  console.log(`Admin dashboard running at http://localhost:${PORT} in ${NODE_ENV} mode`);
}).on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`Port ${PORT} is already in use. Please close the application using this port or use a different port.`);
    process.exit(1);
  } else {
    console.error('Server error:', err);
    process.exit(1);
  }
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('Shutting down admin dashboard server...');
  server.close(() => {
    console.log('Admin dashboard server closed');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('Shutting down admin dashboard server...');
  server.close(() => {
    console.log('Admin dashboard server closed');
    process.exit(0);
  });
}); 